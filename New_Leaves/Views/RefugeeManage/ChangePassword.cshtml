@model New_Leaves.Models.Refugee
@{
    ViewBag.Title = "RefugeeModifyAccount";
    Layout = "~/Views/Shared/_LayoutRefugee.cshtml";
}
<script type="text/javascript">
    function Validate() {
        var password = document.getElementById("Password").value;
        var confirmPassword = document.getElementById("OldConfirmPassword").value;

        if (password != confirmPassword) {
            alert("Passwords do not match.");
            return false;
        }
        return true;
    }
</script>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal contact-form">
        <h3>Change Password</h3>
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.RID)
        <div hidden="hidden" class="form-group">
            @Html.LabelFor(model => model.AuthorityCode, htmlAttributes: new { @class = "col-md-offset-3 col-md-6" })
            <div class="col-md-offset-3 col-md-6">
                @Html.EditorFor(model => model.AuthorityCode, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.AuthorityCode, "", new { @class = "text-danger" })
            </div>
        </div>
        <div hidden="hidden" class="form-group">
            @Html.LabelFor(model => model.RefugeeFName, htmlAttributes: new { @class = "col-md-offset-3 col-md-6" })
            <div class="col-md-offset-3 col-md-6">
                @Html.EditorFor(model => model.RefugeeFName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.RefugeeFName, "", new { @class = "text-danger" })
            </div>
        </div>
        <div hidden="hidden" class="form-group">
            @Html.LabelFor(model => model.RefugeeLName, htmlAttributes: new { @class = "col-md-offset-3 col-md-6" })
            <div class="col-md-offset-3 col-md-6">
                @Html.EditorFor(model => model.RefugeeLName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.RefugeeLName, "", new { @class = "text-danger" })
            </div>
        </div>
        <div hidden="hidden" class="form-group">
            @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "col-md-offset-3 col-md-6" })
            <div class="col-md-offset-3 col-md-6">
                @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.OldConfirmPassword, htmlAttributes: new { @class = "col-md-offset-3 col-md-6" })
            <div class="col-md-offset-3 col-md-6">
                @Html.EditorFor(model => model.OldConfirmPassword, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.OldConfirmPassword, "", new { @class = "text-danger" })
            </div>
        </div>

        <div  class="form-group">
            @Html.LabelFor(model => model.NewPassword, htmlAttributes: new { @class = "col-md-offset-3 col-md-6" })
            <div class="col-md-offset-3 col-md-6">
                @Html.EditorFor(model => model.NewPassword, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.NewPassword, "", new { @class = "text-danger" })
            </div>
        </div>

        <div  class="form-group">
            @Html.LabelFor(model => model.ConfirmNewPassword, htmlAttributes: new { @class = "col-md-offset-3 col-md-6" })
            <div class="col-md-offset-3 col-md-6">
                @Html.EditorFor(model => model.ConfirmNewPassword, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ConfirmNewPassword, "", new { @class = "text-danger" })
            </div>
        </div>

        <div hidden="hidden" class="form-group">
            @Html.LabelFor(model => model.Postcode, htmlAttributes: new { @class = "col-md-offset-3 col-md-6" })
            <div class="col-md-offset-3 col-md-6">
                @Html.EditorFor(model => model.Postcode, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Postcode, "", new { @class = "text-danger" })
            </div>
        </div>
        <div hidden="hidden" class="form-group">
            @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "col-md-offset-3 col-md-6" })
            <div class="col-md-offset-3 col-md-6">
                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
            </div>
        </div>
        <div hidden="hidden" class="form-group">
            @Html.LabelFor(model => model.Street, htmlAttributes: new { @class = "col-md-offset-3 col-md-6" })
            <div class="col-md-offset-3 col-md-6">
                @Html.EditorFor(model => model.Street, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Street, "", new { @class = "text-danger" })
            </div>
        </div>
        <div hidden="hidden" class="form-group">
            @Html.LabelFor(model => model.Suburb, htmlAttributes: new { @class = "col-md-offset-3 col-md-6" })
            <div class="col-md-offset-3 col-md-6">
                @Html.EditorFor(model => model.Suburb, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Suburb, "", new { @class = "text-danger" })
            </div>
        </div>
        <div hidden="hidden"  class="form-group">
            @Html.LabelFor(model => model.State, htmlAttributes: new { @class = "col-md-offset-3 col-md-6" })
            <div class="col-md-offset-3 col-md-6">
                @{
                    List<SelectListItem> listItems = new List<SelectListItem>();
                    listItems.Add(new SelectListItem
                    {
                        Text = "NSW",
                        Value = "NSW"
                    });
                    listItems.Add(new SelectListItem
                    {
                        Text = "QLD",
                        Value = "QLD",

                    });
                    listItems.Add(new SelectListItem
                    {
                        Text = "SA",
                        Value = "SA"
                    });
                    listItems.Add(new SelectListItem
                    {
                        Text = "TAS",
                        Value = "TAS"
                    });
                    listItems.Add(new SelectListItem
                    {
                        Text = "VIC",
                        Value = "VIC",
                        Selected = true
                    });
                    listItems.Add(new SelectListItem
                    {
                        Text = "WA",
                        Value = "WA"
                    });
                    listItems.Add(new SelectListItem
                    {
                        Text = "ACT",
                        Value = "ACT"
                    });
                    listItems.Add(new SelectListItem
                    {
                        Text = "NT",
                        Value = "NT"
                    });
                }

                @Html.DropDownListFor(model => model.State, listItems, "-- Select State --")
                @*   @Html.EditorFor(model => model.State, new { htmlAttributes = new { @class = "form-control" } })*@
                @Html.ValidationMessageFor(model => model.State, "", new { @class = "text-danger" })

            </div>
        </div >
        <div hidden="hidden" class="form-group">
            @Html.LabelFor(model => model.Phone, htmlAttributes: new { @class = "col-md-offset-3 col-md-6" })
            <div class="col-md-offset-3 col-md-6">
                @Html.EditorFor(model => model.Phone, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger" })
            </div>
        </div>
        <div hidden="hidden" class="form-group">
            @Html.LabelFor(model => model.Family_Description, htmlAttributes: new { @class = "col-md-offset-3 col-md-6" })
            <div class="col-md-offset-3 col-md-6">
                @Html.EditorFor(model => model.Family_Description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Family_Description, "", new { @class = "text-danger" })
            </div>
        </div>
        <div hidden="hidden" class="form-group">
            @Html.LabelFor(model => model.Icon, htmlAttributes: new { @class = "col-md-offset-3 col-md-6" })
            <div class="col-md-offset-3 col-md-6">
                @Html.EditorFor(model => model.Icon, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Icon, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-9">
                <input type="submit" value="Save" onclick="return Validate()" class="btn-theme btn-style-two pull-right" />
            </div>
        </div>
    </div>
                    }
<div>
    @Html.ActionLink("Go back ", "RefugeeDetails", "RefugeeManage", new { code = User.Identity.Name }, null)
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/bootstrap")
    @Scripts.Render("~/bundles/revolution")
    @Scripts.Render("~/bundles/jquery.fancybox.pack")
    @Scripts.Render("~/bundles/jquery.fancybox-media")
    @Scripts.Render("~/bundles/owl")
    @Scripts.Render("~/bundles/appear")
    @Scripts.Render("~/bundles/wow")
    @Scripts.Render("~/bundles/jquery-ui")
    @Scripts.Render("~/bundles/mixitup")
    @Scripts.Render("~/bundles/validate")
    @Scripts.Render("~/bundles/script")
    @Scripts.Render("~/bundles/newLeavesViz")
}


